// ignore_for_file: non_constant_identifier_names

// Класс-утилита для создания Map из двух множеств (ключей и значений)
// Используется для связывания пользовательских названий (на русском) с внутренними enum значениями
class CoupleMaker {
  // Статический метод для создания Map из двух множеств
  // Аргументы:
  // - keys: множество строк (обычно названия на русском для отображения в UI)
  // - vals: множество динамических значений (обычно enum значения для внутренней логики)
  // Возвращает: Map<String, dynamic> - связанные пары ключ-значение
  static Map<String, dynamic> CMtoMap(Set<String> keys, Set<dynamic> vals) {
    // Проверка, что количество ключей совпадает с количеством значений
    // Это важно для корректного сопоставления элементов
    if (keys.length != vals.length) {
      // Если размеры не совпадают, выбрасываем исключение с понятным сообщением
      throw ArgumentError("Количество ключей должно совпадать с количеством значений.");
    }

    // Преобразуем множества в списки, чтобы обеспечить упорядоченность и возможность обхода по индексу
    // Множества (Set) не гарантируют порядок элементов, а списки (List) - гарантируют
    final keyList = keys.toList();  // Преобразуем Set<String> в List<String>
    final valList = vals.toList();  // Преобразуем Set<dynamic> в List<dynamic>

    // Создаем пустую Map для заполнения
    final map = <String, dynamic>{};
    
    // Проходим по всем элементам списков (они одинаковой длины благодаря проверке выше)
    for (var i = 0; i < keyList.length; i++) {
      // Создаем пару ключ-значение в Map:
      // - ключ: строка из keyList (например, "общий", "дварфийский")
      // - значение: соответствующий элемент из valList (например, LangsNames.Common, LangsNames.Dwarvish)
      map[keyList[i]] = valList[i];
    }

    // Возвращаем заполненную Map
    return map;
  }
}
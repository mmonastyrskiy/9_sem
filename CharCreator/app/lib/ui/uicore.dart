// Импорт библиотеки Flutter для работы с виджетами и Material Design
import 'package:flutter/material.dart';

// Абстрактный интерфейс для объектов, которые могут предоставлять выбор элементов
// Ключевое слово 'abstract' означает, что класс не может быть инстанциирован напрямую
// Ключевое слово 'interface' указывает, что это интерфейс (хотя в Dart все классы неявно являются интерфейсами)
abstract interface class Pickable{
  // Множество строк, представляющих доступные пункты меню для выбора
  // Используется Set для обеспечения уникальности элементов
  Set<String> menu={};
  
  // Множество для хранения результатов выбора
  // Используется динамический тип для хранения различных типов данных
  Set<dynamic> ret={};
  
  // Метод для выбора одного элемента
  // Аргументы:
  // - bc: BuildContext необходим для доступа к теме, навигации и другим возможностям Flutter
  // Возвращает: String? - выбранный элемент или null, если выбор не сделан
  // Знак вопроса означает, что метод может вернуть null
  String? pick(BuildContext bc){
    // Базовая реализация возвращает null
    // Конкретные классы должны переопределить этот метод
    return null;
  }
  
  // Метод для выбора нескольких элементов
  // Аргументы:
  // - bc: BuildContext для доступа к контексту Flutter
  // - initialSelections: необязательный список предварительно выбранных элементов (может быть null)
  // - howmany: количество элементов для выбора (по умолчанию 2)
  // Возвращает: Set<String>? - множество выбранных элементов или null, если выбор не сделан
  // Квадратные скобки обозначают необязательные параметры
  Future<Set<String>>? pickmany(BuildContext bc,[ List<String>? initialSelections,int howmany=2]){
    // Базовая реализация возвращает null
    // Конкретные классы должны предоставить свою реализацию
    return null;  
  }
  
}
// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ Flutter
import 'dart:async';

import 'package:flutter/material.dart';
// –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π



class _MultiSelectDialog extends StatefulWidget {
  final List<String> items;
  final List<String>? initialSelections;

  const _MultiSelectDialog({
    required this.items,
    this.initialSelections,
  });

  @override
  State<_MultiSelectDialog> createState() => _MultiSelectDialogState();
}

class _MultiSelectDialogState extends State<_MultiSelectDialog> {
  late List<bool> _selectionState;

  @override
  void initState() {
    super.initState();
    _selectionState = List.generate(
      widget.items.length,
      (index) => widget.initialSelections?.contains(widget.items[index]) ?? false,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: const Color(0xFF2d1b00),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
        side: const BorderSide(color: Colors.amber, width: 2),
      ),
      child: Container(
        width: MediaQuery.of(context).size.width * 0.9,
        height: 500,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF2d1b00),
              Color(0xFF1a1a1a),
            ],
          ),
        ),
        child: Column(
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                border: Border(bottom: BorderSide(color: Colors.amber, width: 1)),
              ),
              child: const Row(
                children: [
                  Icon(Icons.checklist, color: Colors.amber),
                  SizedBox(width: 8),
                  Text(
                    '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä',
                    style: TextStyle(
                      color: Colors.amber,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
            
            // –°–ø–∏—Å–æ–∫
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.all(8),
                itemCount: widget.items.length,
                itemBuilder: (_, index) {
                  return Card(
                    color: const Color(0xFF1a1a1a),
                    margin: const EdgeInsets.symmetric(vertical: 4),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                      side: BorderSide(
                        color: _selectionState[index] ? Colors.amber : Colors.grey,
                        width: 1,
                      ),
                    ),
                    child: CheckboxListTile(
                      value: _selectionState[index],
                      controlAffinity: ListTileControlAffinity.leading,
                      activeColor: Colors.amber,
                      checkColor: Colors.black,
                      title: Text(
                        widget.items[index],
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      onChanged: (value) {
                        setState(() {
                          _selectionState[index] = value ?? false;
                        });
                      },
                    ),
                  );
                },
              ),
            ),
            
            // –ö–Ω–æ–ø–∫–∏
            Container(
              padding: const EdgeInsets.all(16),
              decoration: const BoxDecoration(
                border: Border(top: BorderSide(color: Colors.amber, width: 1)),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  OutlinedButton(
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.amber,
                      side: const BorderSide(color: Colors.amber),
                    ),
                    onPressed: () {
                      Navigator.of(context).pop(null);
                    },
                    child: const Text('–û—Ç–º–µ–Ω–∞'),
                  ),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.amber,
                      foregroundColor: Colors.black,
                    ),
                    onPressed: () {
                      Navigator.of(context,rootNavigator: true).pop(_selectionState);
                    },
                    child: const Text('–í—ã–±—Ä–∞—Ç—å'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}



// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –≤—ã–±–æ—Ä–∞
class ModalDispatcher{
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  // –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  // - context: –∫–æ–Ω—Ç–µ–∫—Å—Ç BuildContext –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  // - items: Map –≥–¥–µ –∫–ª—é—á–∏ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏, –∑–Ω–∞—á–µ–Ω–∏—è - —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: Future<String?> - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ null
  // ignore: strict_top_level_inference
  static  showListPicker(BuildContext context, Map<String, dynamic> items) async {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ Map –≤ List –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  List<String> keys = items.keys.toList();
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è Map –≤ List –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  List<dynamic> vals = items.values.toList();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  final selectedIndex = await showModalBottomSheet<int>(
    context: context,
    backgroundColor: const Color(0xFF2d1b00),
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      side: BorderSide(color: Colors.amber, width: 2),
    ),
    builder: (BuildContext context) {
      // –°–æ–∑–¥–∞–µ–º ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      return Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF2d1b00),
              Color(0xFF1a1a1a),
            ],
          ),
        ),
        child: ListView.builder(
          itemCount: items.length, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä—É Map
          itemBuilder: (BuildContext context, int index) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ Map
            return Card(
              color: const Color(0xFF1a1a1a),
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
                side: const BorderSide(color: Colors.amber, width: 1),
              ),
              child: ListTile(
                leading: const Icon(Icons.arrow_forward_ios, color: Colors.amber, size: 16),
                title: Text(
                  keys[index],
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                onTap: () {
                  // –ü—Ä–∏ —Ç–∞–ø–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
                  Navigator.pop(context, index); // –í–æ–∑–≤—Ä–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                },
              ),
            );
          },
        ),
      );
    },
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
  if (selectedIndex != null && selectedIndex >= 0 && selectedIndex < vals.length) {
    return keys[selectedIndex]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫–ª—é—á –∏–∑ Map)
  }

  return null; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}



// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
// –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
// - context: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç BuildContext
// - items: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π Map —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
// - initialSelections: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
static Future<Set<String>> showMultiSelectListPicker({
  required BuildContext context,
  required Set<String> items,
  List<String>? initialSelections,
}) async {
  final List<String> keys = items.toList();
  
  //print("‚úÖ Context is valid, items: ${items.length}");
  
await Future.delayed(Duration(milliseconds: 100));
  final List<bool>? result = await showDialog<List<bool>>(
    // ignore: use_build_context_synchronously
    context: context,
    barrierDismissible: false,
    builder: (context) {
      return _MultiSelectDialog(
        items: keys,
        initialSelections: initialSelections,
      );
    },
  );

 //print("üü¢ –î–∏–∞–ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result");
  
  if (result == null) return {};

  final Set<String> selections = {};
  for (var i = 0; i < result.length; i++) {
    if (result[i]) selections.add(keys[i]);
  }
  return selections;
}
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º–∏ –æ–∫–Ω–∞–º–∏ –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
class PopUpDispatcher{
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–∫–∏ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  // –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  // - context: –∫–æ–Ω—Ç–µ–∫—Å—Ç BuildContext –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
  // - errorMessage: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  static void showErrorDialog(BuildContext context,String errorMessage)async {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
  final dialog = Dialog(
    backgroundColor: const Color(0xFF2d1b00),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(12),
      side: const BorderSide(color: Colors.red, width: 2),
    ),
    child: Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF522d2d),
            Color(0xFF2d1b00),
          ],
        ),
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
          Row(
            children: [
              const Icon(Icons.error, color: Colors.red, size: 24),
              const SizedBox(width: 8),
              const Text(
                '–û—à–∏–±–∫–∞',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          Text(
            errorMessage,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    ),
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
  showDialog(
    context: context,
    builder: (_) => dialog, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
  );
}
}